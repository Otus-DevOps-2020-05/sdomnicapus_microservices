- name: Install the Kubernetes
  hosts: workers
  become: true

  tasks:

    - name: Get worker pod_cidr
      set_fact:
        pod_cidr: "{{ ansible_default_ipv4.address }}"

    - name: Install socat conntrack ipset
      apt:
        name: 
          - socat 
          - conntrack 
          - ipset

    - name: Create directories
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - /etc/cni/net.d
        - /opt/cni/bin
        - /var/lib/kubelet
        - /var/lib/kube-proxy
        - /var/lib/kubernetes

    - name: Download binaries
      get_url:
        url: https://storage.googleapis.com/kubernetes-release/release/v1.15.3/bin/linux/amd64/{{ item }}
        dest: /usr/local/bin/{{ item }}
        mode: 0755
      with_items:
        - kube-proxy
        - kubelet
        - kubectl

    - name: Get crictl
      unarchive:
        src: https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.15.0/crictl-v1.15.0-linux-amd64.tar.gz
        dest: /usr/local/bin
        remote_src: true

    - name: Get cni-plugins
      unarchive:
        src: https://github.com/containernetworking/plugins/releases/download/v0.8.2/cni-plugins-linux-amd64-v0.8.2.tgz
        dest: /opt/cni/bin
        remote_src: true

    - name: Get containerd
      unarchive:
        src: https://github.com/containerd/containerd/releases/download/v1.2.9/containerd-1.2.9.linux-amd64.tar.gz
        dest: /
        remote_src: true

    - name: Install runc
      get_url:
        url: https://github.com/opencontainers/runc/releases/download/v1.0.0-rc5/runc.amd64
        dest: /usr/local/bin/runc
        mode: 075

    - name: Create loopback
      template:
        src: 99-loopback.conf.j2
        dest: /etc/cni/net.d/99-loopback.conf

    - name: Create bridge
      template:
        src: 10-bridge.conf.j2
        dest: /etc/cni/net.d/10-bridge.conf
    
    - name: Copy containerd
      copy:
        src: config.toml
        dest: /etc/containerd/config.toml

    - name: Copy containerd.service
      copy:
        src: containerd.service
        dest: /etc/containerd/containerd.service
      notify: Restart containerd

    - name: Copy certificates, keys
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      with_items:
        - { src: "{{ inventory_hostname}}-key.pem",  dest: "/var/lib/kubelet/{{ inventory_hostname}}-key.pem" }
        - { src: "{{ inventory_hostname}}.pem",  dest: "/var/lib/kubelet/{{ inventory_hostname}}.pem" }
        - { src: "{{ inventory_hostname}}.kubeconfig",  dest: "/var/lib/kubelet/kubeconfig" }
        - { src: "ca.pem",  dest: "/var/lib/kubernetes/ca.pem" }

    - name: Copy kubelet-config
      template:
        src: kubelet-config.yaml.j2
        dest: /var/lib/kubelet/kubelet-config.yaml

    - name: Copy  the kubelet.service
      copy:
        src: kubelet.service
        dest: /etc/systemd/system/kubelet.service
      notify: Restart kubelet

    - name: Copy kube-proxy.kubeconfig
      copy:
        src: kube-proxy.kubeconfig
        dest: /var/lib/kube-proxy/kubeconfig

    - name: Copy kube-proxy-config.yaml
      copy:
        src: kube-proxy-config.yaml
        dest: /var/lib/kube-proxy/kube-proxy-config.yaml

    - name: Copy kube-proxy.service
      copy:
        src: kube-proxy.service
        dest: /etc/systemd/system/kube-proxy.service
      notify: Restart kube-proxy


  handlers:

  - name: Restart containerd
    systemd:
      state: restarted
      enabled: yes
      daemon_reload: yes
      name: containerd
    become: true

  - name: Restart kubelet
    systemd:
      state: restarted
      enabled: yes
      daemon_reload: yes
      name: kubelet
    become: true

  - name: Restart kube-proxy
    systemd:
      state: restarted
      enabled: yes
      daemon_reload: yes
      name: kube-proxy
    become: true 
